function [ results ] = crossValidateTreeBagger( positiveInstances, ...
                             nNegativeExamples, gridSpacing, sectionSize)
%                        
% Separates the positive instances into 10 subgroups and then repeatedly 
% uses nine for training and one for testing a bag of trees.
%   The positive instances generated with the Matlab training image labeler 
%   APP are 10 times separated into a training (about 90%) and testing 
%   (about 10%) set and the performance evaulated. Testing sets are non-
%   overlapping. To this end, a predictor and a classifier including one 
%   positive and nNegativeExamples (in the form of a grid arround the 
%   positive section) per single frame are computed from the positive 
%   instances. The testing set is computed using a 10x10 grid with a 
%   two-pixel spacing around the expected positive section plus the 
%   positive section itself. 
%   
%   INPUT
%   positiveInstances must be a struct with the fields 'ImageFilename' and
%       'objectBoundingBoxes' as generated by the Matlab training image.
%       labeler APP.
%   nNegativeExamples must be the square of a non-zero natural number and 
%       indicates the maximum number of negative sections used image frame.
%   gridSpacing must be a non-zero natural number larger than 1 and is the 
%       pixel distance between the section in the grid of negative 
%       sections.
%   sectionSize must be a 1x2 array of two non-zero natural numbers
%       denoting the y,x size of the sections. sectionSize also needs to be
%       smaller than the dimensions of the frame.
%   
%   OUTPUT   
%   results is a 10x3 matrix in which the rows (y) correspond to the 10
%       different testing/training-set combination. results(y,1) it
%       the number of true positive sections in the testing set. 
%       results(y,2) is the precentage of positive sections that were
%       identified with the trained model. results(y,3) is the percentage
%       of sections truly negative but identified as positive. 
%       180119: results(y,3) of around 15 % to be okay for a model to still
%           work.

%% Validate input 
if ~isfield(positiveInstances, 'imageFilename') || ...
        ~isfield(positiveInstances, 'objectBoundingBoxes') || ...
        isempty(positiveInstances(1).imageFilename)
    error('positiveInstances does not have the correct format or is empty')
end
validateattributes(sqrt(nNegativeExamples), {'numeric'}, ...
    {'integer', 'positive'}, 'crossValidateTreeBagger', ...
    'sqrt(nNegativeExamples)')
validateattributes(gridSpacing, {'numeric'}, {'positive', 'integer'}, ...
    'crossValidateTreeBagger', 'gridSpacing')
validateattributes(sectionSize,{'numeric'},{'positive', 'integer', ...
    'size', [1,2]}, 'crossValidateTreeBagger', 'sectionSize')


%% Separate instances into 10 sets - nine for training and one for testing.
nInstancesPerSet = floor(length(positiveInstances)/10);
setRandomizer = randperm(size(positiveInstances, 2));
results = zeros(10, 3);
for iSet = 0:9
    setStart = iSet*nInstancesPerSet+1;
    setEnd = (iSet+1)*nInstancesPerSet;
    testSet = positiveInstances(:,setRandomizer(setStart:setEnd));
    trainingSet = positiveInstances;
    trainingSet(:,setRandomizer(setStart:setEnd)) = [];
    [trainingPredictor, trainingClassification] = ...
        computePredictorAndClassification( trainingSet,...
        nNegativeExamples, gridSpacing, sectionSize );
    [testPredictor, testClassification] = ...
        computePredictorAndClassification( testSet, 100, 2, sectionSize);
    
    % Generate the bag of trees with the training data and predict the
    % testing data
    B = TreeBagger(300, trainingPredictor, trainingClassification);
    classificationFit = predict(B,testPredictor);
    classificationFit = cell2mat(classificationFit);
    
    % Generate a results sheet with the true positive frames and the
    % predicted positive frames
    testClassificationPositive = find(testClassification==1);
    classificationFitPositive = find(classificationFit=='1');
    results(iSet+1, 1) = length(testClassificationPositive); 
    correctlyIdentified = sum(ismember(testClassificationPositive, ...
        classificationFitPositive)); 
    results(iSet+1, 2) = correctlyIdentified/...
        length(testClassificationPositive)*100;
    results(iSet+1, 3) = ((length(classificationFitPositive)...
        -correctlyIdentified))/length(testClassification)*100; 
end
end